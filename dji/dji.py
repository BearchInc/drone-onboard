# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dji', [dirname(__file__)])
        except ImportError:
            import _dji
            return _dji
        if fp is not None:
            try:
                _mod = imp.load_module('_dji', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dji = swig_import_helper()
    del swig_import_helper
else:
    import _dji
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_dji.TASK_GOHOME_swigconstant(_dji)
TASK_GOHOME = _dji.TASK_GOHOME

_dji.TASK_TAKEOFF_swigconstant(_dji)
TASK_TAKEOFF = _dji.TASK_TAKEOFF

_dji.TASK_LANDING_swigconstant(_dji)
TASK_LANDING = _dji.TASK_LANDING

_dji.ACK_SUCCESS_swigconstant(_dji)
ACK_SUCCESS = _dji.ACK_SUCCESS

_dji.ACK_KEYERROR_swigconstant(_dji)
ACK_KEYERROR = _dji.ACK_KEYERROR

_dji.ACK_NO_AUTHORIZATION_swigconstant(_dji)
ACK_NO_AUTHORIZATION = _dji.ACK_NO_AUTHORIZATION

_dji.ACK_NO_RIGHTS_swigconstant(_dji)
ACK_NO_RIGHTS = _dji.ACK_NO_RIGHTS

_dji.ACK_NO_RESPONSE_swigconstant(_dji)
ACK_NO_RESPONSE = _dji.ACK_NO_RESPONSE

_dji.SET_ACTIVATION_swigconstant(_dji)
SET_ACTIVATION = _dji.SET_ACTIVATION

_dji.SET_CONTROL_swigconstant(_dji)
SET_CONTROL = _dji.SET_CONTROL

_dji.SET_BROADCAST_swigconstant(_dji)
SET_BROADCAST = _dji.SET_BROADCAST

_dji.SET_VIRTUALRC_swigconstant(_dji)
SET_VIRTUALRC = _dji.SET_VIRTUALRC

_dji.CODE_GETVERSION_swigconstant(_dji)
CODE_GETVERSION = _dji.CODE_GETVERSION

_dji.CODE_ACTIVATE_swigconstant(_dji)
CODE_ACTIVATE = _dji.CODE_ACTIVATE

_dji.CODE_FREQUENCY_swigconstant(_dji)
CODE_FREQUENCY = _dji.CODE_FREQUENCY

_dji.CODE_TOMOBILE_swigconstant(_dji)
CODE_TOMOBILE = _dji.CODE_TOMOBILE

_dji.CODE_SETCONTROL_swigconstant(_dji)
CODE_SETCONTROL = _dji.CODE_SETCONTROL

_dji.CODE_TASK_swigconstant(_dji)
CODE_TASK = _dji.CODE_TASK

_dji.CODE_STATUS_swigconstant(_dji)
CODE_STATUS = _dji.CODE_STATUS

_dji.CODE_CONTROL_swigconstant(_dji)
CODE_CONTROL = _dji.CODE_CONTROL

_dji.CODE_SETARM_swigconstant(_dji)
CODE_SETARM = _dji.CODE_SETARM

_dji.CODE_BROADCAST_swigconstant(_dji)
CODE_BROADCAST = _dji.CODE_BROADCAST

_dji.CODE_LOSTCTRL_swigconstant(_dji)
CODE_LOSTCTRL = _dji.CODE_LOSTCTRL

_dji.CODE_FROMMOBILE_swigconstant(_dji)
CODE_FROMMOBILE = _dji.CODE_FROMMOBILE

_dji.CODE_MISSION_swigconstant(_dji)
CODE_MISSION = _dji.CODE_MISSION

_dji.CODE_WAYPOINT_swigconstant(_dji)
CODE_WAYPOINT = _dji.CODE_WAYPOINT

_dji.CODE_VIRTUALRC_SETTINGS_swigconstant(_dji)
CODE_VIRTUALRC_SETTINGS = _dji.CODE_VIRTUALRC_SETTINGS

_dji.CODE_VIRTUALRC_DATA_swigconstant(_dji)
CODE_VIRTUALRC_DATA = _dji.CODE_VIRTUALRC_DATA
class CoreAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreAPI, name)
    __repr__ = _swig_repr

    def sendPoll(self):
        return _dji.CoreAPI_sendPoll(self)

    def readPoll(self):
        return _dji.CoreAPI_readPoll(self)

    def callbackPoll(self):
        return _dji.CoreAPI_callbackPoll(self)

    def autoResendPoll(self):
        return _dji.CoreAPI_autoResendPoll(self)

    def byteHandler(self, in_data):
        return _dji.CoreAPI_byteHandler(self, in_data)

    def byteStreamHandler(self, buffer, size):
        return _dji.CoreAPI_byteStreamHandler(self, buffer, size)

    def __init__(self, Driver, useCallbackThread=False, userRecvCallback=0):
        this = _dji.new_CoreAPI(Driver, useCallbackThread, userRecvCallback)
        try:
            self.this.append(this)
        except:
            self.this = this

    def ack(self, req_id, ackdata, len):
        return _dji.CoreAPI_ack(self, req_id, ackdata, len)

    def send(self, *args):
        return _dji.CoreAPI_send(self, *args)

    def activate(self, data, callback=0):
        return _dji.CoreAPI_activate(self, data, callback)

    def setControl(self, enable, callback=0):
        return _dji.CoreAPI_setControl(self, enable, callback)

    def getVersion(self, callback=0):
        return _dji.CoreAPI_getVersion(self, callback)

    def sendToMobile(self, data, len, callback=0):
        return _dji.CoreAPI_sendToMobile(self, data, len, callback)

    def setBroadcastFeq(self, data, callback=0):
        return _dji.CoreAPI_setBroadcastFeq(self, data, callback)

    def setActivation(self, isActivated):
        return _dji.CoreAPI_setActivation(self, isActivated)

    def setKey(self, key):
        return _dji.CoreAPI_setKey(self, key)

    def getBroadcastData(self):
        return _dji.CoreAPI_getBroadcastData(self)

    def getTime(self):
        return _dji.CoreAPI_getTime(self)

    def getFlightStatus(self):
        return _dji.CoreAPI_getFlightStatus(self)

    def getCtrlInfo(self):
        return _dji.CoreAPI_getCtrlInfo(self)

    def getBatteryCapacity(self):
        return _dji.CoreAPI_getBatteryCapacity(self)

    def setTransparentTransmissionCallback(self, transparentHandlerEntrance):
        return _dji.CoreAPI_setTransparentTransmissionCallback(self, transparentHandlerEntrance)

    def setBroadcastCallback(self, callback):
        return _dji.CoreAPI_setBroadcastCallback(self, callback)
    __swig_getmethods__["activateCallback"] = lambda x: _dji.CoreAPI_activateCallback
    if _newclass:
        activateCallback = staticmethod(_dji.CoreAPI_activateCallback)
    __swig_getmethods__["getVersionCallback"] = lambda x: _dji.CoreAPI_getVersionCallback
    if _newclass:
        getVersionCallback = staticmethod(_dji.CoreAPI_getVersionCallback)
    __swig_getmethods__["setControlCallback"] = lambda x: _dji.CoreAPI_setControlCallback
    if _newclass:
        setControlCallback = staticmethod(_dji.CoreAPI_setControlCallback)
    __swig_getmethods__["sendToMobileCallback"] = lambda x: _dji.CoreAPI_sendToMobileCallback
    if _newclass:
        sendToMobileCallback = staticmethod(_dji.CoreAPI_sendToMobileCallback)
    __swig_getmethods__["setFrequencyCallback"] = lambda x: _dji.CoreAPI_setFrequencyCallback
    if _newclass:
        setFrequencyCallback = staticmethod(_dji.CoreAPI_setFrequencyCallback)

    def getDriver(self):
        return _dji.CoreAPI_getDriver(self)

    def setDriver(self, value):
        return _dji.CoreAPI_setDriver(self, value)

    def getAccountData(self):
        return _dji.CoreAPI_getAccountData(self)

    def setAccountData(self, value):
        return _dji.CoreAPI_setAccountData(self, value)
    __swig_destroy__ = _dji.delete_CoreAPI
    __del__ = lambda self: None
CoreAPI_swigregister = _dji.CoreAPI_swigregister
CoreAPI_swigregister(CoreAPI)

def CoreAPI_activateCallback(This, header):
    return _dji.CoreAPI_activateCallback(This, header)
CoreAPI_activateCallback = _dji.CoreAPI_activateCallback

def CoreAPI_getVersionCallback(This, header):
    return _dji.CoreAPI_getVersionCallback(This, header)
CoreAPI_getVersionCallback = _dji.CoreAPI_getVersionCallback

def CoreAPI_setControlCallback(This, header):
    return _dji.CoreAPI_setControlCallback(This, header)
CoreAPI_setControlCallback = _dji.CoreAPI_setControlCallback

def CoreAPI_sendToMobileCallback(This, header):
    return _dji.CoreAPI_sendToMobileCallback(This, header)
CoreAPI_sendToMobileCallback = _dji.CoreAPI_sendToMobileCallback

def CoreAPI_setFrequencyCallback(This, header):
    return _dji.CoreAPI_setFrequencyCallback(This, header)
CoreAPI_setFrequencyCallback = _dji.CoreAPI_setFrequencyCallback


_dji.API_VER_QUERY_swigconstant(_dji)
API_VER_QUERY = _dji.API_VER_QUERY

_dji.API_CTRL_MANAGEMENT_swigconstant(_dji)
API_CTRL_MANAGEMENT = _dji.API_CTRL_MANAGEMENT

_dji.API_OPEN_SERIAL_swigconstant(_dji)
API_OPEN_SERIAL = _dji.API_OPEN_SERIAL

_dji.API_STD_DATA_swigconstant(_dji)
API_STD_DATA = _dji.API_STD_DATA

_dji.API_CMD_REQUEST_swigconstant(_dji)
API_CMD_REQUEST = _dji.API_CMD_REQUEST

_dji.API_CMD_STATUS_REQUEST_swigconstant(_dji)
API_CMD_STATUS_REQUEST = _dji.API_CMD_STATUS_REQUEST

_dji.API_CTRL_REQUEST_swigconstant(_dji)
API_CTRL_REQUEST = _dji.API_CTRL_REQUEST

_dji.API_TRANSPARENT_DATA_TO_MOBILE_swigconstant(_dji)
API_TRANSPARENT_DATA_TO_MOBILE = _dji.API_TRANSPARENT_DATA_TO_MOBILE

_dji.API_TRANSPARENT_DATA_TO_OBOARD_swigconstant(_dji)
API_TRANSPARENT_DATA_TO_OBOARD = _dji.API_TRANSPARENT_DATA_TO_OBOARD

_dji.API_GIMBAL_CTRL_SPEED_REQUEST_swigconstant(_dji)
API_GIMBAL_CTRL_SPEED_REQUEST = _dji.API_GIMBAL_CTRL_SPEED_REQUEST

_dji.API_GIMBAL_CTRL_ANGLE_REQUEST_swigconstant(_dji)
API_GIMBAL_CTRL_ANGLE_REQUEST = _dji.API_GIMBAL_CTRL_ANGLE_REQUEST

_dji.API_MISSION_WP_INFO_swigconstant(_dji)
API_MISSION_WP_INFO = _dji.API_MISSION_WP_INFO

_dji.API_MISSION_WP_DATA_swigconstant(_dji)
API_MISSION_WP_DATA = _dji.API_MISSION_WP_DATA

_dji.API_MISSION_WP_CMD_swigconstant(_dji)
API_MISSION_WP_CMD = _dji.API_MISSION_WP_CMD

_dji.API_MISSION_HP_START_swigconstant(_dji)
API_MISSION_HP_START = _dji.API_MISSION_HP_START

_dji.API_MISSION_HP_CMD_swigconstant(_dji)
API_MISSION_HP_CMD = _dji.API_MISSION_HP_CMD

_dji.API_VERSION_QUERY_swigconstant(_dji)
API_VERSION_QUERY = _dji.API_VERSION_QUERY

_dji.API_USER_ACTIVATION_swigconstant(_dji)
API_USER_ACTIVATION = _dji.API_USER_ACTIVATION

_dji.API_INFO_QUERY_swigconstant(_dji)
API_INFO_QUERY = _dji.API_INFO_QUERY

_dji.API_SIM_ECHO_swigconstant(_dji)
API_SIM_ECHO = _dji.API_SIM_ECHO

_dji.HORIZ_ATT_swigconstant(_dji)
HORIZ_ATT = _dji.HORIZ_ATT

_dji.HORIZ_VEL_swigconstant(_dji)
HORIZ_VEL = _dji.HORIZ_VEL

_dji.HORIZ_POS_swigconstant(_dji)
HORIZ_POS = _dji.HORIZ_POS

_dji.VERT_VEL_swigconstant(_dji)
VERT_VEL = _dji.VERT_VEL

_dji.VERT_POS_swigconstant(_dji)
VERT_POS = _dji.VERT_POS

_dji.VERT_TRU_swigconstant(_dji)
VERT_TRU = _dji.VERT_TRU

_dji.YAW_ANG_swigconstant(_dji)
YAW_ANG = _dji.YAW_ANG

_dji.YAW_RATE_swigconstant(_dji)
YAW_RATE = _dji.YAW_RATE

_dji.HORIZ_GND_swigconstant(_dji)
HORIZ_GND = _dji.HORIZ_GND

_dji.HORIZ_BODY_swigconstant(_dji)
HORIZ_BODY = _dji.HORIZ_BODY

_dji.YAW_GND_swigconstant(_dji)
YAW_GND = _dji.YAW_GND

_dji.YAW_BODY_swigconstant(_dji)
YAW_BODY = _dji.YAW_BODY

_dji.MSG_ENABLE_FLAG_LEN_swigconstant(_dji)
MSG_ENABLE_FLAG_LEN = _dji.MSG_ENABLE_FLAG_LEN

_dji.HAS_TIME_swigconstant(_dji)
HAS_TIME = _dji.HAS_TIME

_dji.HAS_Q_swigconstant(_dji)
HAS_Q = _dji.HAS_Q

_dji.HAS_A_swigconstant(_dji)
HAS_A = _dji.HAS_A

_dji.HAS_V_swigconstant(_dji)
HAS_V = _dji.HAS_V

_dji.HAS_W_swigconstant(_dji)
HAS_W = _dji.HAS_W

_dji.HAS_POS_swigconstant(_dji)
HAS_POS = _dji.HAS_POS

_dji.HAS_MAG_swigconstant(_dji)
HAS_MAG = _dji.HAS_MAG

_dji.HAS_RC_swigconstant(_dji)
HAS_RC = _dji.HAS_RC

_dji.HAS_GIMBAL_swigconstant(_dji)
HAS_GIMBAL = _dji.HAS_GIMBAL

_dji.HAS_STATUS_swigconstant(_dji)
HAS_STATUS = _dji.HAS_STATUS

_dji.HAS_BATTERY_swigconstant(_dji)
HAS_BATTERY = _dji.HAS_BATTERY

_dji.HAS_DEVICE_swigconstant(_dji)
HAS_DEVICE = _dji.HAS_DEVICE
class req_id_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, req_id_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, req_id_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sequence_number"] = _dji.req_id_t_sequence_number_set
    __swig_getmethods__["sequence_number"] = _dji.req_id_t_sequence_number_get
    if _newclass:
        sequence_number = _swig_property(_dji.req_id_t_sequence_number_get, _dji.req_id_t_sequence_number_set)
    __swig_setmethods__["session_id"] = _dji.req_id_t_session_id_set
    __swig_getmethods__["session_id"] = _dji.req_id_t_session_id_get
    if _newclass:
        session_id = _swig_property(_dji.req_id_t_session_id_get, _dji.req_id_t_session_id_set)
    __swig_setmethods__["need_encrypt"] = _dji.req_id_t_need_encrypt_set
    __swig_getmethods__["need_encrypt"] = _dji.req_id_t_need_encrypt_get
    if _newclass:
        need_encrypt = _swig_property(_dji.req_id_t_need_encrypt_get, _dji.req_id_t_need_encrypt_set)
    __swig_setmethods__["reserve"] = _dji.req_id_t_reserve_set
    __swig_getmethods__["reserve"] = _dji.req_id_t_reserve_get
    if _newclass:
        reserve = _swig_property(_dji.req_id_t_reserve_get, _dji.req_id_t_reserve_set)

    def __init__(self):
        this = _dji.new_req_id_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dji.delete_req_id_t
    __del__ = lambda self: None
req_id_t_swigregister = _dji.req_id_t_swigregister
req_id_t_swigregister(req_id_t)


_dji.DATA_MAX_SIZE_swigconstant(_dji)
DATA_MAX_SIZE = _dji.DATA_MAX_SIZE

_dji.ERR_INDEX_swigconstant(_dji)
ERR_INDEX = _dji.ERR_INDEX

_dji.EXC_DATA_SIZE_swigconstant(_dji)
EXC_DATA_SIZE = _dji.EXC_DATA_SIZE

_dji.SET_CMD_SIZE_swigconstant(_dji)
SET_CMD_SIZE = _dji.SET_CMD_SIZE

_dji.REQ_TIME_OUT_swigconstant(_dji)
REQ_TIME_OUT = _dji.REQ_TIME_OUT

_dji.REQ_REFUSE_swigconstant(_dji)
REQ_REFUSE = _dji.REQ_REFUSE

_dji.CMD_RECIEVE_swigconstant(_dji)
CMD_RECIEVE = _dji.CMD_RECIEVE

_dji.STATUS_CMD_EXECUTING_swigconstant(_dji)
STATUS_CMD_EXECUTING = _dji.STATUS_CMD_EXECUTING

_dji.STATUS_CMD_EXE_FAIL_swigconstant(_dji)
STATUS_CMD_EXE_FAIL = _dji.STATUS_CMD_EXE_FAIL

_dji.STATUS_CMD_EXE_SUCCESS_swigconstant(_dji)
STATUS_CMD_EXE_SUCCESS = _dji.STATUS_CMD_EXE_SUCCESS
class TaskData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd_sequence"] = _dji.TaskData_cmd_sequence_set
    __swig_getmethods__["cmd_sequence"] = _dji.TaskData_cmd_sequence_get
    if _newclass:
        cmd_sequence = _swig_property(_dji.TaskData_cmd_sequence_get, _dji.TaskData_cmd_sequence_set)
    __swig_setmethods__["cmd_data"] = _dji.TaskData_cmd_data_set
    __swig_getmethods__["cmd_data"] = _dji.TaskData_cmd_data_get
    if _newclass:
        cmd_data = _swig_property(_dji.TaskData_cmd_data_get, _dji.TaskData_cmd_data_set)

    def __init__(self):
        this = _dji.new_TaskData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dji.delete_TaskData
    __del__ = lambda self: None
TaskData_swigregister = _dji.TaskData_swigregister
TaskData_swigregister(TaskData)


_dji.SDK_ACTIVATE_SUCCESS_swigconstant(_dji)
SDK_ACTIVATE_SUCCESS = _dji.SDK_ACTIVATE_SUCCESS

_dji.SDK_ACTIVATE_PARAM_ERROR_swigconstant(_dji)
SDK_ACTIVATE_PARAM_ERROR = _dji.SDK_ACTIVATE_PARAM_ERROR

_dji.SDK_ACTIVATE_DATA_ENC_ERROR_swigconstant(_dji)
SDK_ACTIVATE_DATA_ENC_ERROR = _dji.SDK_ACTIVATE_DATA_ENC_ERROR

_dji.SDK_ACTIVATE_NEW_DEVICE_swigconstant(_dji)
SDK_ACTIVATE_NEW_DEVICE = _dji.SDK_ACTIVATE_NEW_DEVICE

_dji.SDK_ACTIVATE_DJI_APP_NOT_CONNECT_swigconstant(_dji)
SDK_ACTIVATE_DJI_APP_NOT_CONNECT = _dji.SDK_ACTIVATE_DJI_APP_NOT_CONNECT

_dji.SDK_ACTIVATE_DIJ_APP_NO_INTERNET_swigconstant(_dji)
SDK_ACTIVATE_DIJ_APP_NO_INTERNET = _dji.SDK_ACTIVATE_DIJ_APP_NO_INTERNET

_dji.SDK_ACTIVATE_SERVER_REFUSED_swigconstant(_dji)
SDK_ACTIVATE_SERVER_REFUSED = _dji.SDK_ACTIVATE_SERVER_REFUSED

_dji.SDK_ACTIVATE_LEVEL_ERROR_swigconstant(_dji)
SDK_ACTIVATE_LEVEL_ERROR = _dji.SDK_ACTIVATE_LEVEL_ERROR

_dji.SDK_ACTIVATE_SDK_VERSION_ERROR_swigconstant(_dji)
SDK_ACTIVATE_SDK_VERSION_ERROR = _dji.SDK_ACTIVATE_SDK_VERSION_ERROR
class ActivateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActivateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["app_id"] = _dji.ActivateData_app_id_set
    __swig_getmethods__["app_id"] = _dji.ActivateData_app_id_get
    if _newclass:
        app_id = _swig_property(_dji.ActivateData_app_id_get, _dji.ActivateData_app_id_set)
    __swig_setmethods__["app_api_level"] = _dji.ActivateData_app_api_level_set
    __swig_getmethods__["app_api_level"] = _dji.ActivateData_app_api_level_get
    if _newclass:
        app_api_level = _swig_property(_dji.ActivateData_app_api_level_get, _dji.ActivateData_app_api_level_set)
    __swig_setmethods__["app_ver"] = _dji.ActivateData_app_ver_set
    __swig_getmethods__["app_ver"] = _dji.ActivateData_app_ver_get
    if _newclass:
        app_ver = _swig_property(_dji.ActivateData_app_ver_get, _dji.ActivateData_app_ver_set)
    __swig_setmethods__["app_bundle_id"] = _dji.ActivateData_app_bundle_id_set
    __swig_getmethods__["app_bundle_id"] = _dji.ActivateData_app_bundle_id_get
    if _newclass:
        app_bundle_id = _swig_property(_dji.ActivateData_app_bundle_id_get, _dji.ActivateData_app_bundle_id_set)
    __swig_setmethods__["app_key"] = _dji.ActivateData_app_key_set
    __swig_getmethods__["app_key"] = _dji.ActivateData_app_key_get
    if _newclass:
        app_key = _swig_property(_dji.ActivateData_app_key_get, _dji.ActivateData_app_key_set)

    def __init__(self):
        this = _dji.new_ActivateData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dji.delete_ActivateData
    __del__ = lambda self: None
ActivateData_swigregister = _dji.ActivateData_swigregister
ActivateData_swigregister(ActivateData)

class VersionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VersionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VersionData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version_ack"] = _dji.VersionData_version_ack_set
    __swig_getmethods__["version_ack"] = _dji.VersionData_version_ack_get
    if _newclass:
        version_ack = _swig_property(_dji.VersionData_version_ack_get, _dji.VersionData_version_ack_set)
    __swig_setmethods__["version_crc"] = _dji.VersionData_version_crc_set
    __swig_getmethods__["version_crc"] = _dji.VersionData_version_crc_get
    if _newclass:
        version_crc = _swig_property(_dji.VersionData_version_crc_get, _dji.VersionData_version_crc_set)
    __swig_setmethods__["version_name"] = _dji.VersionData_version_name_set
    __swig_getmethods__["version_name"] = _dji.VersionData_version_name_get
    if _newclass:
        version_name = _swig_property(_dji.VersionData_version_name_get, _dji.VersionData_version_name_set)

    def __init__(self):
        this = _dji.new_VersionData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dji.delete_VersionData
    __del__ = lambda self: None
VersionData_swigregister = _dji.VersionData_swigregister
VersionData_swigregister(VersionData)

class FlightData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlightData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlightData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctrl_flag"] = _dji.FlightData_ctrl_flag_set
    __swig_getmethods__["ctrl_flag"] = _dji.FlightData_ctrl_flag_get
    if _newclass:
        ctrl_flag = _swig_property(_dji.FlightData_ctrl_flag_get, _dji.FlightData_ctrl_flag_set)
    __swig_setmethods__["roll_or_x"] = _dji.FlightData_roll_or_x_set
    __swig_getmethods__["roll_or_x"] = _dji.FlightData_roll_or_x_get
    if _newclass:
        roll_or_x = _swig_property(_dji.FlightData_roll_or_x_get, _dji.FlightData_roll_or_x_set)
    __swig_setmethods__["pitch_or_y"] = _dji.FlightData_pitch_or_y_set
    __swig_getmethods__["pitch_or_y"] = _dji.FlightData_pitch_or_y_get
    if _newclass:
        pitch_or_y = _swig_property(_dji.FlightData_pitch_or_y_get, _dji.FlightData_pitch_or_y_set)
    __swig_setmethods__["thr_z"] = _dji.FlightData_thr_z_set
    __swig_getmethods__["thr_z"] = _dji.FlightData_thr_z_get
    if _newclass:
        thr_z = _swig_property(_dji.FlightData_thr_z_get, _dji.FlightData_thr_z_set)
    __swig_setmethods__["yaw"] = _dji.FlightData_yaw_set
    __swig_getmethods__["yaw"] = _dji.FlightData_yaw_get
    if _newclass:
        yaw = _swig_property(_dji.FlightData_yaw_get, _dji.FlightData_yaw_set)

    def __init__(self):
        this = _dji.new_FlightData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dji.delete_FlightData
    __del__ = lambda self: None
FlightData_swigregister = _dji.FlightData_swigregister
FlightData_swigregister(FlightData)

class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    CODE_GIMBAL_SPEED = _dji.Camera_CODE_GIMBAL_SPEED
    CODE_GIMBAL_ANGLE = _dji.Camera_CODE_GIMBAL_ANGLE
    CODE_CAMERA_SHOT = _dji.Camera_CODE_CAMERA_SHOT
    CODE_CAMERA_VIDEO_START = _dji.Camera_CODE_CAMERA_VIDEO_START
    CODE_CAMERA_VIDEO_STOP = _dji.Camera_CODE_CAMERA_VIDEO_STOP

    def __init__(self, ContorlAPI=None):
        this = _dji.new_Camera(ContorlAPI)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setCamera(self, camera_cmd):
        return _dji.Camera_setCamera(self, camera_cmd)

    def setGimbalAngle(self, data):
        return _dji.Camera_setGimbalAngle(self, data)

    def setGimbalSpeed(self, data):
        return _dji.Camera_setGimbalSpeed(self, data)

    def getGimbal(self):
        return _dji.Camera_getGimbal(self)

    def getYaw(self):
        return _dji.Camera_getYaw(self)

    def getRoll(self):
        return _dji.Camera_getRoll(self)

    def getPitch(self):
        return _dji.Camera_getPitch(self)

    def isYawLimit(self):
        return _dji.Camera_isYawLimit(self)

    def isRollLimit(self):
        return _dji.Camera_isRollLimit(self)

    def isPitchLimit(self):
        return _dji.Camera_isPitchLimit(self)

    def getApi(self):
        return _dji.Camera_getApi(self)

    def setApi(self, value):
        return _dji.Camera_setApi(self, value)
    __swig_destroy__ = _dji.delete_Camera
    __del__ = lambda self: None
Camera_swigregister = _dji.Camera_swigregister
Camera_swigregister(Camera)


_dji._SDK_MAX_RECV_SIZE_swigconstant(_dji)
_SDK_MAX_RECV_SIZE = _dji._SDK_MAX_RECV_SIZE

_dji._SDK_CRC_HEAD_SIZE_swigconstant(_dji)
_SDK_CRC_HEAD_SIZE = _dji._SDK_CRC_HEAD_SIZE

_dji._SDK_CRC_DATA_SIZE_swigconstant(_dji)
_SDK_CRC_DATA_SIZE = _dji._SDK_CRC_DATA_SIZE

def transformTwoByte(pstr, pdata):
    return _dji.transformTwoByte(pstr, pdata)
transformTwoByte = _dji.transformTwoByte
class Flight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flight, name)
    __repr__ = _swig_repr

    def __init__(self, ContorlAPI=None):
        this = _dji.new_Flight(ContorlAPI)
        try:
            self.this.append(this)
        except:
            self.this = this

    def task(self, taskname, TaskCallback=0):
        return _dji.Flight_task(self, taskname, TaskCallback)

    def setArm(self, enable, ArmCallback=0):
        return _dji.Flight_setArm(self, enable, ArmCallback)

    def setFlight(self, data):
        return _dji.Flight_setFlight(self, data)

    def getQuaternion(self):
        return _dji.Flight_getQuaternion(self)

    def getPossition(self):
        return _dji.Flight_getPossition(self)

    def getVelocity(self):
        return _dji.Flight_getVelocity(self)

    def getAcceleration(self):
        return _dji.Flight_getAcceleration(self)

    def getPalstance(self):
        return _dji.Flight_getPalstance(self)

    def getMagnet(self):
        return _dji.Flight_getMagnet(self)
    __swig_getmethods__["armCallback"] = lambda x: _dji.Flight_armCallback
    if _newclass:
        armCallback = staticmethod(_dji.Flight_armCallback)
    __swig_getmethods__["taskCallback"] = lambda x: _dji.Flight_taskCallback
    if _newclass:
        taskCallback = staticmethod(_dji.Flight_taskCallback)

    def getApi(self):
        return _dji.Flight_getApi(self)

    def setApi(self, value):
        return _dji.Flight_setApi(self, value)
    __swig_destroy__ = _dji.delete_Flight
    __del__ = lambda self: None
Flight_swigregister = _dji.Flight_swigregister
Flight_swigregister(Flight)

def Flight_armCallback(This, header):
    return _dji.Flight_armCallback(This, header)
Flight_armCallback = _dji.Flight_armCallback

def Flight_taskCallback(This, header):
    return _dji.Flight_taskCallback(This, header)
Flight_taskCallback = _dji.Flight_taskCallback

class HardDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HardDriver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self):
        return _dji.HardDriver_init(self)

    def getTimeStamp(self):
        return _dji.HardDriver_getTimeStamp(self)

    def send(self, buf, len):
        return _dji.HardDriver_send(self, buf, len)

    def readall(self, buf, maxlen):
        return _dji.HardDriver_readall(self, buf, maxlen)

    def lockMemory(self):
        return _dji.HardDriver_lockMemory(self)

    def freeMemory(self):
        return _dji.HardDriver_freeMemory(self)

    def lockMSG(self):
        return _dji.HardDriver_lockMSG(self)

    def freeMSG(self):
        return _dji.HardDriver_freeMSG(self)
    TYPE_STATUS = _dji.HardDriver_TYPE_STATUS
    TYPE_ERROR = _dji.HardDriver_TYPE_ERROR
    TYPE_DEBUG = _dji.HardDriver_TYPE_DEBUG

    def displayLog(self, buf=None):
        return _dji.HardDriver_displayLog(self, buf)
    __swig_destroy__ = _dji.delete_HardDriver
    __del__ = lambda self: None
HardDriver_swigregister = _dji.HardDriver_swigregister
HardDriver_swigregister(HardDriver)


_dji.ACK_SESSION_IDLE_swigconstant(_dji)
ACK_SESSION_IDLE = _dji.ACK_SESSION_IDLE

_dji.ACK_SESSION_PROCESS_swigconstant(_dji)
ACK_SESSION_PROCESS = _dji.ACK_SESSION_PROCESS

_dji.ACK_SESSION_USING_swigconstant(_dji)
ACK_SESSION_USING = _dji.ACK_SESSION_USING

_dji.POLL_TICK_swigconstant(_dji)
POLL_TICK = _dji.POLL_TICK
# This file is compatible with both classic and new-style classes.


